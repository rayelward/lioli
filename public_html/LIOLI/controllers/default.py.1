# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################



def index():
    redirect(URL('recents'))
    return dict()
#TODO: allow voting
def recents():
    page_min = 0
    page_max = 10
    where_clause = (db.lioli_main.accepted == 1)
    fields = [db.lioli_main.unique_id, db.lioli_main.body, db.lioli_main.loves, db.lioli_main.leaves, db.lioli_main.age, db.lioli_main.gender]
    rows = db(where_clause).select(limitby=(page_min, page_max), orderby=~db.lioli_main.id, *fields)
    return dict(rows=rows)
    
#TODO: allow voting
def random():
    where_clause = (db.lioli_main.accepted == 1)
    fields = [db.lioli_main.unique_id, db.lioli_main.body, db.lioli_main.loves, db.lioli_main.leaves, db.lioli_main.age, db.lioli_main.gender]
    rows = db(where_clause).select(limitby=(0, 10), orderby='<random>', *fields)
    return dict(rows=rows)

##uses ajax to bring up a search via keywords for people.
def search():
    return dict(form=FORM(INPUT(_id='keyword', _name='keyword',
        _onkeyup="ajax('bg_find', ['keyword'], 'target');")),
        target_div=DIV(_id='target'))
        
##shows the searched for data in more detail
def show():
    u_id = request.args(0) or redirect(URL('search'))
    row = db((db.lioli_main.accepted==1) & (db.lioli_main.unique_id==u_id)).select().first()
    return dict(row=row)

##gets user submissions and enters them into the database.
def submit():
    message = 'Please input a submission'
    form = SQLFORM.factory(
        Field('body', 'text', requires=IS_NOT_EMPTY()),
        Field('age', requires= IS_IN_SET((range(12, 125))), widget = SQLFORM.widgets.options.widget),
        Field('gender', requires = IS_IN_SET((('F', 'M'))), widget = SQLFORM.widgets.radio.widget))
    if form.process().accepted:
        unique_id = insert_into_my_db(form.vars.body, form.vars.age, form.vars.gender)
        message = "Thank you for your submission.  Please refer to %s in the future to see how people have voted on it" % (unique_id)
        response.flash = 'accepted'
    return dict(form=form, message=message)
    
##leads to default/about.html which gives a description of the application:
def about():
    return dict()
    
##function called by ajax to display search results
def bg_find():
    pattern = '%' + request.vars.keyword.lower() + '%'
    pages = db(((db.lioli_main.body.lower().like(pattern)) |(db.lioli_main.unique_id.like(pattern))) & (db.lioli_main.accepted==1)).select(limitby=(0,10))
    items = [DIV(A(row.unique_id, _href=URL('show', args=row.unique_id)), P(row.body, _class="search_preview")) for row in pages]
    return UL(*items).xml()






##def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
##    return response.download(request,db)


##def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
##    return service()


##@auth.requires_signature()
##def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs bust be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
##    return dict(form=crud())
